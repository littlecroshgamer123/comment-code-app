// A full-featured frontend for a chat/posting app with sign-in, post, and reply functionality.
// Backend functionality (auth, db) would need to be built with Firebase, Supabase, or your own API.

"use client";

import { useState } from "react";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Textarea } from "../components/ui/textarea";
import { Card, CardContent } from "../components/ui/card";
import { ImagePlus } from "lucide-react";

export default function Home() {
  const [user, setUser] = useState(null); // simulated user
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [text, setText] = useState("");
  const [image, setImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [chats, setChats] = useState([]);
  const [replies, setReplies] = useState({});

  const handleImageChange = (e) => {
    const file = e.target.files?.[0];
    if (file) {
      setImage(file);
      const reader = new FileReader();
      reader.onloadend = () => setImagePreview(reader.result);
      reader.readAsDataURL(file);
    }
  };

  const handleSignIn = () => {
    setUser({ email });
  };

  const handleLogout = () => {
    setUser(null);
    setEmail("");
    setPassword("");
  };

  const createChat = () => {
    if (!user) return alert("Please sign in to create your own chat.");
    setChats([...chats, { id: Date.now(), owner: user.email, posts: [] }]);
  };

  const postToChat = (chatId) => {
    if (!user) return alert("Please sign in.");
    const chatIndex = chats.findIndex((chat) => chat.id === chatId);
    if (chats[chatIndex].owner !== user.email) return alert("You can only post in your own chat.");

    const newPost = {
      id: Date.now(),
      text,
      image: imagePreview,
      replies: [],
    };

    const updatedChats = [...chats];
    updatedChats[chatIndex].posts.unshift(newPost);
    setChats(updatedChats);
    setText("");
    setImage(null);
    setImagePreview(null);
  };

  const addReply = (chatId, postId, replyText) => {
    if (!user) return alert("Sign in to reply.");

    const updatedChats = chats.map((chat) => {
      if (chat.id !== chatId) return chat;
      return {
        ...chat,
        posts: chat.posts.map((post) => {
          if (post.id !== postId) return post;
          return {
            ...post,
            replies: [...post.replies, { id: Date.now(), text: replyText }],
          };
        }),
      };
    });

    setChats(updatedChats);
  };

  return (
    <div className="max-w-3xl mx-auto p-4 space-y-6">
      <h1 className="text-2xl font-bold text-center">Chat & Post App</h1>

      {!user ? (
        <Card>
          <CardContent className="space-y-3 pt-4">
            <Input placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
            <Input placeholder="Password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
            <Button onClick={handleSignIn}>Sign In / Sign Up</Button>
          </CardContent>
        </Card>
      ) : (
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Signed in as {user.email}</span>
          <Button onClick={handleLogout}>Log Out</Button>
        </div>
      )}

      {user && <Button onClick={createChat}>Create Your Chat</Button>}

      {chats.map((chat) => (
        <Card key={chat.id} className="space-y-4">
          <CardContent>
            <h2 className="font-bold">Chat by {chat.owner}</h2>

            {chat.owner === user?.email && (
              <div className="space-y-2">
                <Textarea
                  placeholder="Write something..."
                  value={text}
                  onChange={(e) => setText(e.target.value)}
                />
                <label className="flex items-center gap-2 cursor-pointer">
                  <ImagePlus className="w-5 h-5" />
                  <span>Add Image</span>
                  <input type="file" accept="image/*" className="hidden" onChange={handleImageChange} />
                </label>
                {image && <span className="text-sm text-gray-600">{image.name}</span>}
                <Button onClick={() => postToChat(chat.id)}>Post</Button>
              </div>
            )}

            <div className="space-y-4 mt-4">
              {chat.posts.map((post) => (
                <Card key={post.id} className="p-2">
                  <p>{post.text}</p>
                  {post.image && <img src={post.image} alt="post" className="max-h-48 rounded-lg" />}

                  <div className="ml-4 mt-2 space-y-1">
                    {post.replies.map((r) => (
                      <div key={r.id} className="text-sm text-gray-700">â†³ {r.text}</div>
                    ))}
                    {user && (
                      <Input
                        placeholder="Reply..."
                        onKeyDown={(e) => {
                          if (e.key === "Enter") addReply(chat.id, post.id, e.target.value);
                        }}
                      />
                    )}
                  </div>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
